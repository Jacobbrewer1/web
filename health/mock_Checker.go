// Code generated by mockery. DO NOT EDIT.

package health

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockChecker is an autogenerated mock type for the Checker type
type MockChecker struct {
	mock.Mock
}

// Check provides a mock function with given fields: ctx
func (_m *MockChecker) Check(ctx context.Context) *Result {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Check")
	}

	var r0 *Result
	if rf, ok := ret.Get(0).(func(context.Context) *Result); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Result)
		}
	}

	return r0
}

// Handler provides a mock function with no fields
func (_m *MockChecker) Handler() http.HandlerFunc {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Handler")
	}

	var r0 http.HandlerFunc
	if rf, ok := ret.Get(0).(func() http.HandlerFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.HandlerFunc)
		}
	}

	return r0
}

// NewMockChecker creates a new instance of MockChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChecker {
	mock := &MockChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
